
import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { Readable } from "stream";
import { LexRuntimeV2ServiceException as __BaseException } from "./LexRuntimeV2ServiceException";

export declare class AccessDeniedException extends __BaseException {
    readonly name: "AccessDeniedException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
}

export interface ActiveContextTimeToLive {
    
    timeToLiveInSeconds: number | undefined;
    
    turnsToLive: number | undefined;
}
export declare namespace ActiveContextTimeToLive {
    
    const filterSensitiveLog: (obj: ActiveContextTimeToLive) => any;
}

export interface ActiveContext {
    
    name: string | undefined;
    
    timeToLive: ActiveContextTimeToLive | undefined;
    
    contextAttributes: {
        [key: string]: string;
    } | undefined;
}
export declare namespace ActiveContext {
    
    const filterSensitiveLog: (obj: ActiveContext) => any;
}

export interface AudioInputEvent {
    
    audioChunk?: Uint8Array;
    
    contentType: string | undefined;
    
    eventId?: string;
    
    clientTimestampMillis?: number;
}
export declare namespace AudioInputEvent {
    
    const filterSensitiveLog: (obj: AudioInputEvent) => any;
}

export interface AudioResponseEvent {
    
    audioChunk?: Uint8Array;
    
    contentType?: string;
    
    eventId?: string;
}
export declare namespace AudioResponseEvent {
    
    const filterSensitiveLog: (obj: AudioResponseEvent) => any;
}

export declare class ConflictException extends __BaseException {
    readonly name: "ConflictException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface DeleteSessionRequest {
    
    botId: string | undefined;
    
    botAliasId: string | undefined;
    
    localeId: string | undefined;
    
    sessionId: string | undefined;
}
export declare namespace DeleteSessionRequest {
    
    const filterSensitiveLog: (obj: DeleteSessionRequest) => any;
}
export interface DeleteSessionResponse {
    
    botId?: string;
    
    botAliasId?: string;
    
    localeId?: string;
    
    sessionId?: string;
}
export declare namespace DeleteSessionResponse {
    
    const filterSensitiveLog: (obj: DeleteSessionResponse) => any;
}

export declare class InternalServerException extends __BaseException {
    readonly name: "InternalServerException";
    readonly $fault: "server";
    
    constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
}

export declare class ResourceNotFoundException extends __BaseException {
    readonly name: "ResourceNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
}

export declare class ThrottlingException extends __BaseException {
    readonly name: "ThrottlingException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
}

export declare class ValidationException extends __BaseException {
    readonly name: "ValidationException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
}
export interface GetSessionRequest {
    
    botId: string | undefined;
    
    botAliasId: string | undefined;
    
    localeId: string | undefined;
    
    sessionId: string | undefined;
}
export declare namespace GetSessionRequest {
    
    const filterSensitiveLog: (obj: GetSessionRequest) => any;
}
export declare enum ConfirmationState {
    CONFIRMED = "Confirmed",
    DENIED = "Denied",
    NONE = "None"
}
export declare enum Shape {
    LIST = "List",
    SCALAR = "Scalar"
}

export interface Value {
    
    originalValue?: string;
    
    interpretedValue: string | undefined;
    
    resolvedValues?: string[];
}
export declare namespace Value {
    
    const filterSensitiveLog: (obj: Value) => any;
}
export declare enum IntentState {
    FAILED = "Failed",
    FULFILLED = "Fulfilled",
    FULFILLMENT_IN_PROGRESS = "FulfillmentInProgress",
    IN_PROGRESS = "InProgress",
    READY_FOR_FULFILLMENT = "ReadyForFulfillment",
    WAITING = "Waiting"
}

export interface ConfidenceScore {
    
    score?: number;
}
export declare namespace ConfidenceScore {
    
    const filterSensitiveLog: (obj: ConfidenceScore) => any;
}
export declare enum SentimentType {
    MIXED = "MIXED",
    NEGATIVE = "NEGATIVE",
    NEUTRAL = "NEUTRAL",
    POSITIVE = "POSITIVE"
}

export interface SentimentScore {
    
    positive?: number;
    
    negative?: number;
    
    neutral?: number;
    
    mixed?: number;
}
export declare namespace SentimentScore {
    
    const filterSensitiveLog: (obj: SentimentScore) => any;
}

export interface SentimentResponse {
    
    sentiment?: SentimentType | string;
    
    sentimentScore?: SentimentScore;
}
export declare namespace SentimentResponse {
    
    const filterSensitiveLog: (obj: SentimentResponse) => any;
}
export declare enum MessageContentType {
    CUSTOM_PAYLOAD = "CustomPayload",
    IMAGE_RESPONSE_CARD = "ImageResponseCard",
    PLAIN_TEXT = "PlainText",
    SSML = "SSML"
}

export interface Button {
    
    text: string | undefined;
    
    value: string | undefined;
}
export declare namespace Button {
    
    const filterSensitiveLog: (obj: Button) => any;
}

export interface ImageResponseCard {
    
    title: string | undefined;
    
    subtitle?: string;
    
    imageUrl?: string;
    
    buttons?: Button[];
}
export declare namespace ImageResponseCard {
    
    const filterSensitiveLog: (obj: ImageResponseCard) => any;
}

export interface Message {
    
    content?: string;
    
    contentType: MessageContentType | string | undefined;
    
    imageResponseCard?: ImageResponseCard;
}
export declare namespace Message {
    
    const filterSensitiveLog: (obj: Message) => any;
}
export declare enum StyleType {
    DEFAULT = "Default",
    SPELL_BY_LETTER = "SpellByLetter",
    SPELL_BY_WORD = "SpellByWord"
}
export declare enum DialogActionType {
    CLOSE = "Close",
    CONFIRM_INTENT = "ConfirmIntent",
    DELEGATE = "Delegate",
    ELICIT_INTENT = "ElicitIntent",
    ELICIT_SLOT = "ElicitSlot",
    NONE = "None"
}

export interface DialogAction {
    
    type: DialogActionType | string | undefined;
    
    slotToElicit?: string;
    
    slotElicitationStyle?: StyleType | string;
}
export declare namespace DialogAction {
    
    const filterSensitiveLog: (obj: DialogAction) => any;
}

export interface RuntimeHintValue {
    
    phrase: string | undefined;
}
export declare namespace RuntimeHintValue {
    
    const filterSensitiveLog: (obj: RuntimeHintValue) => any;
}

export interface RuntimeHintDetails {
    
    runtimeHintValues: RuntimeHintValue[] | undefined;
}
export declare namespace RuntimeHintDetails {
    
    const filterSensitiveLog: (obj: RuntimeHintDetails) => any;
}

export interface RuntimeHints {
    
    slotHints?: {
        [key: string]: {
            [key: string]: RuntimeHintDetails;
        };
    };
}
export declare namespace RuntimeHints {
    
    const filterSensitiveLog: (obj: RuntimeHints) => any;
}

export declare class BadGatewayException extends __BaseException {
    readonly name: "BadGatewayException";
    readonly $fault: "server";
    
    constructor(opts: __ExceptionOptionType<BadGatewayException, __BaseException>);
}

export declare class DependencyFailedException extends __BaseException {
    readonly name: "DependencyFailedException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DependencyFailedException, __BaseException>);
}
export interface PutSessionResponse {
    
    contentType?: string;
    
    messages?: string;
    
    sessionState?: string;
    
    requestAttributes?: string;
    
    sessionId?: string;
    
    audioStream?: Readable | ReadableStream | Blob;
}
export declare namespace PutSessionResponse {
    
    const filterSensitiveLog: (obj: PutSessionResponse) => any;
}
export interface RecognizeUtteranceRequest {
    
    botId: string | undefined;
    
    botAliasId: string | undefined;
    
    localeId: string | undefined;
    
    sessionId: string | undefined;
    
    sessionState?: string;
    
    requestAttributes?: string;
    
    requestContentType: string | undefined;
    